게시글 목록 조회를 위한 작업 순서 정리

1. 사전 준비
  - pagination 패키지 추가
  - Criteria 클래스 추가(노션 참고)
    - Criteria 클래스에 게시판 번호를 추가하거나 Criteria 클래스를 상속받은 PostCriteria 클래스를 추가하여 필드를 추가
  - PageMaker 클래스 추가(노션 참고)
2. 컨트롤러
  - 매개변수로 Criteria 객체를 추가
  - 기존에 있던 게시판 번호를 제거하면서 게시판 번호를 사용하는 부분을 수정
  - 서비스에게 게시판 번호를 주면서 시켰던 작업을 Criteria 객체를 주면서 시킴
  - New : 서비스에게 현재 페이지 정보를 주면서 PageMaker 객체를 가져오라고 요청 후 화면에 전달
  - 선택 : 한페이지의 컨텐츠 수를 원하는 크기로 설정
3. 서비스/서비스임플
  - 게시판 번호를 Criteria 객체로 수정
  - New : 메소드를 추가. 현재 페이지 정보에 맞는 전체 게시글수를 가져온 후, 이를 이용하여 PageMaker 객체를 생성해서 반환
4. 다오/매퍼
  - 다오는 게시판 번호를 Criteria 객체로 수정
  - 매퍼는 limit을 이용하여 게시글 개수를 조절
  - New : 메소드 및 쿼리를 추가. 쿼리는 게시글 목록 조회를 참고하여 작성
5. list.jsp
  - PageMaker를 이용하여 페이지네이션을 구현

게시글 목록 검색
1. list.jsp
  - 검색 타입, 검색어 입력창, 검색버튼을 form태그로 감싸서 추가
  - 검색 타입은 전체(0), 제목+내용(1), 작성자(2)
  - form태그의 action은 /post/list
  - form태그 안에 hidden으로 게시판 번호를 넘겨줌

2. 매퍼
  - 검색어인 search와 검색 타입을 type을 이용하여 쿼리를 수정
    - selectPostList
    - selectCountPostList

3. list.jsp
  - 페이지네이션링크에 검색어와 타입을 적용 



댓글 구현을 위한 파일들을 추가
 - CommentController, CommentService, CommentServiceImp, CommentDAO, CommentMapper를 추가하고 필드로 연결
 - CommentVO 추가

댓글 등록
1. /post/detail.jsp
  - 댓글 화면을 구성
    - form태그를 이용. action은 생략해도 됨
2. 비동기 통신을 위한 작업
  - ajax를 위한 문서 참고
  - 의존성 추가 
    - json으로 데이터를 주고 받기 위해서 
3. /post.detail.jsp
  - 등록 버튼을 클릭해서 전송을 하면 비동기통신으로 서버에 전송
     - url : /comment/insert
     - 보낼 데이터 : 게시글 번호, 댓글 내용
     - 받을 데이터 : 등록 여부
4. 컨트롤러
  - 메소드 추가
    - @ResponseBody 추가하지 않음
    - 매개변수에 @RequestBody를 이용하여 Criteria 객체에 저장
    - 현재 페이지정보(Criteria 객체)를 이용하여 댓글 목록을 요청하여 화면에 전송
    - 현재 페이지정보를 이용하여 댓글 페이지메이커를 요청하여 화면에 전송
5. 서비스/서비스 임플
  - 메소드 추가 및 구현
6. 다오/매퍼 
  - 메소드 추가 및 쿼리 구현
7. /comment/list.jsp
  - 생성 및 서버에서 보낸 댓글 목록과 댓글 페이지네이션을 이용하여 화면을 구성
8. /post/detail.jsp
  - 서버에서 보낸 문자열을 html코드로 댓글이 들어가야할 칸에 추가

댓글 목록 조회
1. detail.jsp
  - getCommentList()함수를 추가
    - 비동기 통신으로 댓글 페이지정보를 주면서 댓글 목록을 가져오라고 요청
    - url : /comment/list
    - 보낼 데이터 : 현재 페이지, 게시글번호
    - 받을 데이터 : 댓글 화면으로 구성된 문자열
2. 컨트롤러
  - 화면에서 요청한 목록을 주기 위한 메소드를 추가
    - 매개변수를 이용하여 화면에서 보내준 데이터를 가져옴
    - 빈 문자열을 반환(임시)

3. 컨트롤러 
  - 현재 페이지 정보를 이용하여 서비스에게 댓글을 가져오라고 요청
    - 가져온 댓글 목록을 콘솔에 출력
  - 현재 페이지 정보를 이용하여 서비스에게 페이지메이커를 가져오라고 요청
    - 가져온 페이지메이커를 콘솔에 출력

4. 서비스/서비스임플
  - 현재 페이지정보를 이용하여 댓글 목록을 가져오는 메소드 추가
    - 다오에게 현재 페이지 정보를 주면서 댓글 목록을 가져오라고 요청후 반환
  - 현재 페이지정보를 이용하여 페이지메이커를 가져오는 메소드 추가
    - 다오에게 현재 페이지 정보를 주면서 전체 댓글 수를 가져오라고 요청
    - 전체 댓글 수를 이용하여 페이지메이커를 생성하여 반환

5. 다오/매퍼
  - 현재 페이지정보를 이용하여 댓글 목록을 가져오는 메소드 추가 및 쿼리 구현
    - 게시글 번호를 이용하여 댓글목록을 가져옴.
    - co_ori_num을 기준으로 내림차순, ori_num을 기준으로 오름차순이 되게 정렬(order by)
    - 현재 페이지에 맞게 댓글들을 뽑아서 가져옴(limit)
  - 현재 페이지정보를 이용하여 전체 댓글 수를 가져오는 메소드 추가 및 쿼리 구현
    - 위에서 작성한 쿼리를 복붙. 속성들 중에서 count(*)로 수정, limit절과 orderby절을 제거

답글 등록
1. /comment/list.jsp
  - 답글 등록을 클릭하면 답글을 입력할 수 있는 창이 나오도록 구성

2. /comment/list.jsp
  - 답글 내용을 입력하고 등록하면 답글이 등록되도록 작업
  - 댓글 등록을 활용. co_ori_num를 추가


댓글 삭제
1. /comment/list.jsp
*  - 삭제 버튼에 data-num을 이용하여 댓글 번호를 넘김
*  - 삭제 버튼에 이벤트 등록
*    - 삭제할 댓글번호를 data-num에서 가져옴
*    - 가져온 댓글번호를 ajax로 서버에 전송해서 삭제하라고 요청
      - 성공 여부에 맞게 알림창을 띄운 후 댓글 목록을 새로고침

2. 컨트롤러
*  - 메소드를 추가
*    - url : /comment/delete
*    - 리턴 : boolean
*    - 화면에서 보낸 댓글 번호를 가져와서 콘솔창에 확인한 후 false를 리턴
*     - Session에서 회원 정보를 가져옴
*     - 서비스에게 댓글 번호와 회원 정보를 주면서 삭제하라고 요청 후 결과를 반환

3. 서비스/서비스 임플
* - 메소드를 추가
*   - 다오에게 댓글 번호를 주면서 댓글 정보를 가져오라고 요청
   - 댓글 null체크
   - 댓글의 작성자와 회원의 아이디가 다르면 false를 리턴
   - 다오에게 댓글 번호를 주면서 삭제하라고 요청후 결과를 리턴

4. 다오/매퍼
* - 메소드 추가 및 쿼리 구현
*   - 댓글 번호를 이용하여 댓글을 가져옴
 - 메소드 추가 및 쿼리 구현
  - 댓글 번호를 이용하여 co_del를 Y로 수정


댓글 수정
1. /comment/list.jsp
*  - 수정 버튼에 data-num에 댓글 번호를 추가
*  - 수정 버튼 클릭 이벤트를 등록
*    - 기존 댓글 내용을 가져옴
*    - 기존 댓글을 숨김
*    - data-num 값을 가져옴
*    - textarea태그에 기존 댓글을 넣어주고, form태그로 감싼후 버튼과 함께 기존 댓글 위치에 배치
*       - form태그에 data-num으로 댓글 번호를 넘겨줌

2. /post/detail.jsp
*  - 댓글 수정 form의 submit 이벤트를 등록
*    - submit이 되지 않도록 기본 이벤트를 막음
*    - 댓글 내용과 댓글 번호를 가져옴
*    - 비동기 통신으로 댓글 내용과 댓글 번호를 전송
*      - url : /comment/update
*      - method : post
*      - 서버에서 보낸 데이터를 console.log로 확인

3. 컨트롤러
*  - 메소드를 추가
*    - url : /comment/update
*    - 화면에서 보낸 댓글 번호와 내용을 콘솔창에 출력
    - 로그인한 회원 정보를 가져옴
    - 서비스에게 댓글 정보와 회원 정보를 주면서 수정하라고 요청 후 결과를 반환

4. 서비스/서비스임플
  - 메소드 추가
    - 매개변수 null체크
    - 댓글 번호를 이용하여 댓글을 가져옴
    - 가져온 댓글의 작성자와 로그인한 회원의 아이디가 다르면 false를 반환
    - 다오에게 게시글 정보를 주면서 수정하라고 요청후 결과를 반환

5. 다오/매퍼
  - 메소드 추가 및 쿼리 구현
   - update문을 이용하여 댓글 수정 쿼리 작성

6. /post/detail.jsp
  - 서버에서 보낸 결과를 이용하여 알림창을 띄움
  - 수정에 성공하면 댓글 목록을 새로고침




추천/비추천 구현
1. post/detail.jsp
  - 추천/비추천 버튼을 추가
  - 추천/비추천 버튼을 클릭하면 
    - 게시글 번호가 뜨도록 작업
    - 추천이면 1을 비추천이면 -1이 뜨도록 작업
    - ajax를 이용하여 상태와 게시글 번호를 전송
      - console.log(data)을 추가

2. 컨트롤러
  - 화면에서 보낸 상태와 게시글을 받아 콘솔창에 출력하고 0를 전송
   - 로그인한 회원 정보를 가져와서 콘솔에 출력
   - 서비스에게 추천 정보와 회원 정보를 주면서 결과를 요청하고 반환(0:취소, 1:추천, -1:비추천, -2:문제 발생)

3. LikeVO 추가

4. 서비스/임플
  - 메소드 추가
    - 매개변수 null체크
    - 회원 아이디와 게시글 번호를 이용하여 다오에게 추천 정보를 가져오라고 시킴
    - 추천 정보가 없으면 다오에게 게시글 번호와 회원 아이디를 주면서 추가하라고 요청
    - 

5. 다오/매퍼
  - 아이디와 게시글 정보를 이용하여 추천 정보를 가져오는 메소드 추가 및 쿼리 작성
  - 아이디와 게시글 정보를 이용하여 추천을 추가하는 메소드 추가 및 쿼리 작성

















